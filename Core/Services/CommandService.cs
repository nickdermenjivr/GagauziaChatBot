using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace GagauziaChatBot.Core.Services;

public class CommandService(ITelegramBotClient botClient) : ICommandService
{
    private CarpoolingData _carpoolingData;
    private CarpoolingState _carpoolingState = CarpoolingState.Default;
    private const long GagauziaChatId = -1002696920941;
    private const int CarpoolingThreadId = 15;

    private struct CarpoolingData
    {
        public string Date;
        public string Time;
        public string From;
        public string To;
        public string Phone;
        public string Result;
    }
    private enum CarpoolingState
    {
        Default,
        AwaitingCarpoolingTime,
        AwaitingCarpoolingFrom,
        AwaitingCarpoolingTo,
        AwaitingCarpoolingPhone,
        AwaitingCarPoolingResult
    }
    private static class ButtonTitles
    {
        public const string MainMenu = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é";
        public const string Help = "‚ÑπÔ∏è –ü–æ–º–æ—â—å";
        public const string NewPost = "üìã –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ";
        public const string PostCarpooling = "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ø—É—Ç—á–∏–∫–∞–º";
        public const string Cancel = "‚ùå –û—Ç–º–µ–Ω–∞";
        public const string Carpooling = "üöó –ü–æ–ø—É—Ç—á–∏–∫–∏";
        public const string CarpoolingDataToday = "üèÉ –°–µ–≥–æ–¥–Ω—è";
        public const string CarpoolingDataTomorrow = "üö∂ –ó–∞–≤—Ç—Ä–∞";
        public const string Marketplace = "üõí –†—ã–Ω–æ–∫";
    }

    public async Task HandleCommand(Message message, CancellationToken cancellationToken)
    {
        if (message.Text == null) return;
        
        switch (message.Text)
        {
            case "/start":
                await ShowStartMenu(message.Chat.Id, cancellationToken);
                break;
            case "/menu":
            case ButtonTitles.MainMenu:
            case ButtonTitles.Cancel:
                _carpoolingData = new CarpoolingData();
                _carpoolingState = CarpoolingState.Default;
                await ShowMainMenu(message.Chat.Id, cancellationToken);
                break;
            case "/help":
            case ButtonTitles.Help:
                await ShowHelpMenu(message.Chat.Id, cancellationToken);
                break;
            
            
            case ButtonTitles.NewPost:
                await ShowChooseCategory(message.Chat.Id, cancellationToken);
                break;
            // Carpooling
            case ButtonTitles.Carpooling:
                await ShowCarpoolingMenu(message.Chat.Id, cancellationToken);
                break;
            case ButtonTitles.CarpoolingDataToday:
                _carpoolingData.Date = "–°–µ–≥–æ–¥–Ω—è";
                _carpoolingState = CarpoolingState.AwaitingCarpoolingTime;
                await ShowCarpoolingFillTime(message.Chat.Id, cancellationToken);
                break;
            case ButtonTitles.CarpoolingDataTomorrow:
                _carpoolingData.Date = "–ó–∞–≤—Ç—Ä–∞";
                _carpoolingState = CarpoolingState.AwaitingCarpoolingTime;
                await ShowCarpoolingFillTime(message.Chat.Id, cancellationToken);
                break;
            case not null when _carpoolingState == CarpoolingState.AwaitingCarpoolingTime:
                _carpoolingData.Time = message.Text;
                _carpoolingState = CarpoolingState.AwaitingCarpoolingFrom;
                await ShowCarpoolingFillFrom(message.Chat.Id, cancellationToken);
                break;
            case not null when _carpoolingState == CarpoolingState.AwaitingCarpoolingFrom:
                _carpoolingData.From = message.Text;
                _carpoolingState = CarpoolingState.AwaitingCarpoolingTo;
                await ShowCarpoolingFillTo(message.Chat.Id, cancellationToken);
                break;
            case not null when _carpoolingState == CarpoolingState.AwaitingCarpoolingTo:
                _carpoolingData.To = message.Text;
                _carpoolingState = CarpoolingState.AwaitingCarpoolingPhone;
                await ShowCarpoolingFillPhone(message.Chat.Id, cancellationToken);
                break;
            case not null when _carpoolingState == CarpoolingState.AwaitingCarpoolingPhone:
                _carpoolingData.Phone = message.Text;
                _carpoolingState = CarpoolingState.AwaitingCarPoolingResult;
                _carpoolingData.Result = await ShowCarpoolingResult(message.Chat.Username!, message.Chat.Id, cancellationToken);
                break;
            case ButtonTitles.PostCarpooling:
                await PostCarpooling(message.Chat.Id, GagauziaChatId, CarpoolingThreadId, _carpoolingData.Result, cancellationToken);
                break;
                
            // Marketplace
            case ButtonTitles.Marketplace:
                await ShowMarketplaceMenu(message.Chat.Id, cancellationToken);
                break;
        }
    }

    private async Task ShowStartMenu(long chatId, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] { new KeyboardButton(ButtonTitles.MainMenu) },
            new[] { new KeyboardButton(ButtonTitles.Help) }
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        await botClient.SendMessage(
            chatId: chatId,
            text: "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–Ø –≤–∞—à –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫,",
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
    }

    private async Task ShowMainMenu(long chatId, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.NewPost)},
            new[] {new KeyboardButton(ButtonTitles.Help)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        await botClient.SendMessage(
            chatId: chatId,
            text: "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
    }

    private async Task ShowChooseCategory(long chatId, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.Carpooling)},
            new[] {new KeyboardButton(ButtonTitles.Marketplace)},
            new[] {new KeyboardButton(ButtonTitles.Cancel)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        await botClient.SendMessage(
            chatId: chatId,
            text: "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>",
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
    }
    private async Task ShowCarpoolingMenu(long chatId, CancellationToken ct)
    {
        var messageText = @"üöó <b>–†–∞–∑–¥–µ–ª –ü–æ–ø—É—Ç—á–∏–∫–∏</b>

–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ—Ç–∞–ª–∏:
1. üìÖ <b>–î–∞—Ç–∞</b> (—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞)
2. ‚åõ <b>–í—Ä–µ–º—è</b>
3. üö© <b>–ü—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>
4. üèÅ <b>–ü—É–Ω–∫—Ç –ø—Ä–∏–±—ã—Ç–∏—è</b>
5. ‚òé <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:";

        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            [new KeyboardButton(ButtonTitles.CarpoolingDataToday), new KeyboardButton(ButtonTitles.CarpoolingDataTomorrow)],
            new[] {new KeyboardButton(ButtonTitles.Cancel)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        await botClient.SendMessage(
            chatId: chatId,
            text: messageText,
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
    }
    private async Task ShowCarpoolingFillTime(long chatId, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.Cancel)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        await botClient.SendMessage(
            chatId: chatId,
            text: "<b>‚åõ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è:</b>",
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
    }
    private async Task ShowCarpoolingFillFrom(long chatId, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.Cancel)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        await botClient.SendMessage(
            chatId: chatId,
            text: "<b>üö© –£–∫–∞–∂–∏—Ç–µ –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>",
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
    }
    private async Task ShowCarpoolingFillTo(long chatId, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.Cancel)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        await botClient.SendMessage(
            chatId: chatId,
            text: "<b>üèÅ –£–∫–∞–∂–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:</b>",
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
    }
    private async Task ShowCarpoolingFillPhone(long chatId, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.Cancel)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        await botClient.SendMessage(
            chatId: chatId,
            text: "<b>‚òé –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>",
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
    }
    private async Task<string> ShowCarpoolingResult(string username, long chatId, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.PostCarpooling)},
            new[] {new KeyboardButton(ButtonTitles.Cancel)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        var text = @$"
<b>üöó –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–æ—Ä–æ–≥–∏–µ –ø–æ–ø—É—Ç—á–∏–∫–∏! üöó</b>

<b>üìÖ –ö–æ–≥–¥–∞:</b> {_carpoolingData.Date}
<b>‚è∞ –í–æ —Å–∫–æ–ª—å–∫–æ:</b> {_carpoolingData.Time}
<b>üìç –û—Ç–∫—É–¥–∞:</b> {_carpoolingData.From}
<b>üèÅ –ö—É–¥–∞:</b> {_carpoolingData.To}
<b>üì≤ –ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> +373{_carpoolingData.Phone}
<b>üíåüëâ @{username}</b>

<i>‚ú® –°—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –ø—É—Ç–∏! ‚ú®</i>";
        
        await botClient.SendMessage(
            chatId: chatId,
            text: $"<b>–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>{text}",
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
        return text;
    }

    private async Task PostCarpooling(long chatId, long postChatId, int? postThreadId, string text, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.MainMenu)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };
        await botClient.SendMessage(
            chatId: chatId,
            "–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –≥—Ä—É–ø–ø–µ '–ü–æ–ø—É—Ç—á–∏–∫–∏!'",
            parseMode: ParseMode.Html,
            replyMarkup: keyboard,
            cancellationToken: ct
        );
        
        await botClient.SendMessage(
            chatId: postChatId,
            messageThreadId: postThreadId,
            text: text,
            parseMode: ParseMode.Html,
            cancellationToken: ct);
    }
    private async Task ShowMarketplaceMenu(long chatId, CancellationToken ct)
    {
        await botClient.SendMessage(
            chatId: chatId,
            text: "üõí <b>–†–∞–∑–¥–µ–ª –†—ã–Ω–æ–∫</b>\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä—ã...",
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
    }

    private async Task ShowHelpMenu(long chatId, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.MainMenu)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        await botClient.SendMessage(
            chatId: chatId,
            text: "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
                 "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n" +
                 "/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" +
                 "/help - –ü–æ–º–æ—â—å",
            replyMarkup: keyboard,
            cancellationToken: ct
        );
    }
}