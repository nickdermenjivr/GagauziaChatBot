using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace GagauziaChatBot.Core.Services;

public class CommandService(ITelegramBotClient botClient) : ICommandService
{
    private static class ButtonTitles
    {
        public const string MainMenu = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é";
        public const string Help = "‚ÑπÔ∏è –ü–æ–º–æ—â—å";
        public const string NewPost = "üìã –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ";
        public const string Cancel = "‚ùå –û—Ç–º–µ–Ω–∞";
        public const string Carpooling = "üöó –ü–æ–ø—É—Ç—á–∏–∫–∏";
        public const string Marketplace = "üõí –†—ã–Ω–æ–∫";
    }

    public async Task HandleCommand(Message message, CancellationToken cancellationToken)
    {
        if (message.Text == null) return;

        switch (message.Text)
        {
            case "/start":
                await ShowStartMenu(message.Chat.Id, cancellationToken);
                break;
            case "/menu":
            case ButtonTitles.MainMenu:
            case ButtonTitles.Cancel:
                await ShowMainMenu(message.Chat.Id, cancellationToken);
                break;
            case "/help":
            case ButtonTitles.Help:
                await ShowHelpMenu(message.Chat.Id, cancellationToken);
                break;
            case ButtonTitles.NewPost:
                await ShowChooseCategory(message.Chat.Id, cancellationToken);
                break;
            case ButtonTitles.Carpooling:
                await ShowCarpoolingMenu(message.Chat.Id, cancellationToken);
                break;
            case ButtonTitles.Marketplace:
                await ShowMarketplaceMenu(message.Chat.Id, cancellationToken);
                break;
        }
    }

    private async Task ShowStartMenu(long chatId, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] { new KeyboardButton(ButtonTitles.MainMenu) },
            new[] { new KeyboardButton(ButtonTitles.Help) }
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        await botClient.SendMessage(
            chatId: chatId,
            text: "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–Ø –≤–∞—à –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.",
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
    }

    private async Task ShowMainMenu(long chatId, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.NewPost)},
            new[] {new KeyboardButton(ButtonTitles.Help)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        await botClient.SendMessage(
            chatId: chatId,
            text: "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
    }

    private async Task ShowChooseCategory(long chatId, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.Carpooling)},
            new[] {new KeyboardButton(ButtonTitles.Marketplace)},
            new[] {new KeyboardButton(ButtonTitles.Cancel)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        await botClient.SendMessage(
            chatId: chatId,
            text: "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>",
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
    }

    private async Task ShowCarpoolingMenu(long chatId, CancellationToken ct)
    {
        await botClient.SendMessage(
            chatId: chatId,
            text: "üöó <b>–†–∞–∑–¥–µ–ª –ü–æ–ø—É—Ç—á–∏–∫–∏</b>\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤...",
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
    }

    private async Task ShowMarketplaceMenu(long chatId, CancellationToken ct)
    {
        await botClient.SendMessage(
            chatId: chatId,
            text: "üõí <b>–†–∞–∑–¥–µ–ª –†—ã–Ω–æ–∫</b>\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä—ã...",
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
    }

    private async Task ShowHelpMenu(long chatId, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.MainMenu)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        await botClient.SendMessage(
            chatId: chatId,
            text: "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
                 "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n" +
                 "/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" +
                 "/help - –ü–æ–º–æ—â—å",
            replyMarkup: keyboard,
            cancellationToken: ct
        );
    }
}