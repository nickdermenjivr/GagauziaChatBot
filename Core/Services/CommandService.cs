using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace GagauziaChatBot.Core.Services;

public class CommandService(ITelegramBotClient botClient) : ICommandService
{
    // –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    private const long GagauziaChatId = -1002696920941;
    private const int CarpoolingThreadId = 15;
    private const int MarketplaceThreadId = 18;

    // Carpooling
    private CarpoolingData _carpoolingData;
    private CarpoolingState _carpoolingState = CarpoolingState.Default;
    
    private struct CarpoolingData
    {
        public string Date;
        public string Time;
        public string From;
        public string To;
        public string Phone;
        public string Result;
    }
    
    private enum CarpoolingState
    {
        Default,
        AwaitingCarpoolingTime,
        AwaitingCarpoolingFrom,
        AwaitingCarpoolingTo,
        AwaitingCarpoolingPhone,
        AwaitingCarPoolingResult
    }

    // Marketplace
    private MarketplaceData _marketplaceData;
    private MarketplaceState _marketplaceState = MarketplaceState.Default;
    
    private struct MarketplaceData
    {
        public string Title;
        public string Description;
        public List<string> PhotoUrls;
        public string Contact;
        public string Result;
    }
    
    private enum MarketplaceState
    {
        Default,
        AwaitingTitle,
        AwaitingDescription,
        AwaitingPhotos,
        AwaitingContact,
        AwaitingResult
    }

    // –ö–Ω–æ–ø–∫–∏
    private static class ButtonTitles
    {
        public const string MainMenu = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é";
        public const string NewPost = "üìã –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ";
        public const string PostCarpooling = "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ø—É—Ç—á–∏–∫–∞–º";
        public const string PostMarketplace = "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–∞ —Ä—ã–Ω–∫–µ";
        public const string Cancel = "‚ùå –û—Ç–º–µ–Ω–∞";
        public const string Carpooling = "üöó –ü–æ–ø—É—Ç—á–∏–∫–∏";
        public const string CarpoolingDataToday = "üèÉ –°–µ–≥–æ–¥–Ω—è";
        public const string CarpoolingDataTomorrow = "üö∂ –ó–∞–≤—Ç—Ä–∞";
        public const string Marketplace = "üõí –†—ã–Ω–æ–∫";
        public const string SkipPhotos = "‚è≠ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å";
    }

    public async Task HandleCommand(Message message, CancellationToken cancellationToken)
    {
        // Photo
        if (message.Photo != null)
        {
            var messagePhoto = message.Photo;
            switch (messagePhoto)
            {
                // Marketplace
                case not null when _marketplaceState == MarketplaceState.AwaitingPhotos:
                    await HandleMarketplacePhotos(message, cancellationToken);
                    break;
            }
        }
        
        // Text
        if (message.Text == null) return;

        switch (message.Text)
        {
            case "/menu":
            case ButtonTitles.MainMenu:
            case ButtonTitles.Cancel:
                ResetAllStates();
                await ShowMainMenu(message.Chat.Id, cancellationToken);
                break;
            
            case ButtonTitles.NewPost:
                await ShowChooseCategory(message.Chat.Id, cancellationToken);
                break;
                
            // Carpooling
            case ButtonTitles.Carpooling:
                await ShowCarpoolingMenu(message.Chat.Id, cancellationToken);
                break;
            case ButtonTitles.CarpoolingDataToday:
                _carpoolingData.Date = "–°–µ–≥–æ–¥–Ω—è";
                _carpoolingState = CarpoolingState.AwaitingCarpoolingTime;
                await ShowCarpoolingTimeInput(message.Chat.Id, cancellationToken);
                break;
            case ButtonTitles.CarpoolingDataTomorrow:
                _carpoolingData.Date = "–ó–∞–≤—Ç—Ä–∞";
                _carpoolingState = CarpoolingState.AwaitingCarpoolingTime;
                await ShowCarpoolingTimeInput(message.Chat.Id, cancellationToken);
                break;
            case not null when _carpoolingState == CarpoolingState.AwaitingCarpoolingTime:
                _carpoolingData.Time = message.Text;
                _carpoolingState = CarpoolingState.AwaitingCarpoolingFrom;
                await ShowCarpoolingFromInput(message.Chat.Id, cancellationToken);
                break;
            case not null when _carpoolingState == CarpoolingState.AwaitingCarpoolingFrom:
                _carpoolingData.From = message.Text;
                _carpoolingState = CarpoolingState.AwaitingCarpoolingTo;
                await ShowCarpoolingToInput(message.Chat.Id, cancellationToken);
                break;
            case not null when _carpoolingState == CarpoolingState.AwaitingCarpoolingTo:
                _carpoolingData.To = message.Text;
                _carpoolingState = CarpoolingState.AwaitingCarpoolingPhone;
                await ShowCarpoolingPhoneInput(message.Chat.Id, cancellationToken);
                break;
            case not null when _carpoolingState == CarpoolingState.AwaitingCarpoolingPhone:
                _carpoolingData.Phone = message.Text;
                _carpoolingState = CarpoolingState.AwaitingCarPoolingResult;
                _carpoolingData.Result = await ShowCarpoolingResult(message.Chat.Username!, message.Chat.Id, cancellationToken);
                break;
            case ButtonTitles.PostCarpooling:
                await PostCarpooling(message.Chat.Id, GagauziaChatId, CarpoolingThreadId, _carpoolingData.Result, cancellationToken);
                break;
                
            // Marketplace
            case ButtonTitles.Marketplace:
                _marketplaceState = MarketplaceState.AwaitingTitle;
                _marketplaceData = new MarketplaceData { PhotoUrls = [] };
                await ShowMarketplaceTitleInput(message.Chat.Id, cancellationToken);
                break;
            case not null when _marketplaceState == MarketplaceState.AwaitingTitle:
                _marketplaceData.Title = message.Text;
                _marketplaceState = MarketplaceState.AwaitingDescription;
                await ShowMarketplaceDescInput(message.Chat.Id, cancellationToken);
                break;
            case not null when _marketplaceState == MarketplaceState.AwaitingDescription:
                _marketplaceData.Description = message.Text;
                _marketplaceState = MarketplaceState.AwaitingPhotos;
                await ShowMarketplacePhotosInput(message.Chat.Id, cancellationToken);
                break;
            case ButtonTitles.SkipPhotos when _marketplaceState == MarketplaceState.AwaitingPhotos:
                _marketplaceState = MarketplaceState.AwaitingContact;
                await ShowMarketplaceContactInput(message.Chat.Id, cancellationToken);
                break;
            case not null when _marketplaceState == MarketplaceState.AwaitingContact:
                _marketplaceData.Contact = message.Text;
                _marketplaceState = MarketplaceState.AwaitingResult;
                _marketplaceData.Result = await ShowMarketplaceResult(message.Chat.Id, message.Chat.Username!, cancellationToken);
                break;
            case ButtonTitles.PostMarketplace:
                await PostMarketplace(message.Chat.Id, GagauziaChatId, MarketplaceThreadId, _marketplaceData.Result, cancellationToken);
                break;
        }
    }

    private void ResetAllStates()
    {
        _carpoolingState = CarpoolingState.Default;
        _marketplaceState = MarketplaceState.Default;
        _carpoolingData = new CarpoolingData();
        _marketplaceData = new MarketplaceData { 
            PhotoUrls = []
        };
    }

    #region Common Methods
    private async Task ShowMainMenu(long chatId, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.NewPost)},
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        await botClient.SendMessage(
            chatId: chatId,
            text: "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
    }

    private async Task ShowChooseCategory(long chatId, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.Carpooling)},
            new[] {new KeyboardButton(ButtonTitles.Marketplace)},
            new[] {new KeyboardButton(ButtonTitles.Cancel)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        await botClient.SendMessage(
            chatId: chatId,
            text: "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>",
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
    }
    
    #endregion

    #region Carpooling Methods
    private async Task ShowCarpoolingMenu(long chatId, CancellationToken ct)
    {
        var messageText = @"üöó <b>–†–∞–∑–¥–µ–ª –ü–æ–ø—É—Ç—á–∏–∫–∏</b>

–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ—Ç–∞–ª–∏:
1. üìÖ <b>–î–∞—Ç–∞</b> (—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞)
2. ‚åõ <b>–í—Ä–µ–º—è</b>
3. üö© <b>–ü—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>
4. üèÅ <b>–ü—É–Ω–∫—Ç –ø—Ä–∏–±—ã—Ç–∏—è</b>
5. ‚òé <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:";

        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            [new KeyboardButton(ButtonTitles.CarpoolingDataToday), new KeyboardButton(ButtonTitles.CarpoolingDataTomorrow)],
            new[] {new KeyboardButton(ButtonTitles.Cancel)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        await botClient.SendMessage(
            chatId: chatId,
            text: messageText,
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
    }

    private async Task ShowCarpoolingTimeInput(long chatId, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.Cancel)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        await botClient.SendMessage(
            chatId: chatId,
            text: "<b>‚åõ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è:</b>",
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
    }

    private async Task ShowCarpoolingFromInput(long chatId, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.Cancel)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        await botClient.SendMessage(
            chatId: chatId,
            text: "<b>üö© –£–∫–∞–∂–∏—Ç–µ –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>",
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
    }

    private async Task ShowCarpoolingToInput(long chatId, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.Cancel)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        await botClient.SendMessage(
            chatId: chatId,
            text: "<b>üèÅ –£–∫–∞–∂–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:</b>",
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
    }

    private async Task ShowCarpoolingPhoneInput(long chatId, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.Cancel)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        await botClient.SendMessage(
            chatId: chatId,
            text: "<b>‚òé –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>",
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
    }

    private async Task<string> ShowCarpoolingResult(string username, long chatId, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.PostCarpooling)},
            new[] {new KeyboardButton(ButtonTitles.Cancel)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        var text = @$"
<b>üöó –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–æ—Ä–æ–≥–∏–µ –ø–æ–ø—É—Ç—á–∏–∫–∏! üöó</b>

<b>üìÖ –ö–æ–≥–¥–∞:</b> {_carpoolingData.Date}
<b>‚è∞ –í–æ —Å–∫–æ–ª—å–∫–æ:</b> {_carpoolingData.Time}
<b>üìç –û—Ç–∫—É–¥–∞:</b> {_carpoolingData.From}
<b>üèÅ –ö—É–¥–∞:</b> {_carpoolingData.To}
<b>üì≤ –ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> +373{_carpoolingData.Phone}
<b>üíåüëâ @{username}</b>

<i>‚ú® –°—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –ø—É—Ç–∏! ‚ú®</i>";
        
        await botClient.SendMessage(
            chatId: chatId,
            text: $"<b>–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>{text}",
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
        return text;
    }

    private async Task PostCarpooling(long chatId, long postChatId, int? postThreadId, string text, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.MainMenu)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };
        await botClient.SendMessage(
            chatId: chatId,
            "–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –≥—Ä—É–ø–ø–µ '–ü–æ–ø—É—Ç—á–∏–∫–∏!'",
            parseMode: ParseMode.Html,
            replyMarkup: keyboard,
            cancellationToken: ct
        );
        
        await botClient.SendMessage(
            chatId: postChatId,
            messageThreadId: postThreadId,
            text: text,
            parseMode: ParseMode.Html,
            cancellationToken: ct);
    }
    #endregion

    #region Marketplace Methods
    private async Task ShowMarketplaceTitleInput(long chatId, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.Cancel)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        await botClient.SendMessage(
            chatId: chatId,
            text: "üõí <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b>\n\n–ü—Ä–∏–º–µ—Ä: <i>–ü—Ä–æ–¥–∞–º iPhone 13, 128GB</i>",
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
    }

    private async Task ShowMarketplaceDescInput(long chatId, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.Cancel)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        await botClient.SendMessage(
            chatId: chatId,
            text: "üìù <b>–û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä:</b>\n\n–£–∫–∞–∂–∏—Ç–µ:\n- –°–æ—Å—Ç–æ—è–Ω–∏–µ\n- –¶–µ–Ω—É\n- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏\n\n–ü—Ä–∏–º–µ—Ä: <i>–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –±–∞—Ç–∞—Ä–µ—è 100%. –¶–µ–Ω–∞: 12000 –ª–µ–π. –í –∫–æ–º–ø–ª–µ–∫—Ç–µ —á–µ—Ö–æ–ª –∏ –∑–∞—Ä—è–¥–∫–∞.</i>",
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
    }

    private async Task ShowMarketplacePhotosInput(long chatId, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.SkipPhotos)},
            new[] {new KeyboardButton(ButtonTitles.Cancel)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        await botClient.SendMessage(
            chatId: chatId,
            text: "üì∏ <b>–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–¥–æ 10 —à—Ç.):</b>\n\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ\"",
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
    }
    private async Task HandleMarketplacePhotos(Message message, CancellationToken cancellationToken)
    {
        if (_marketplaceData.PhotoUrls.Count >= 10)
        {
            await botClient.SendMessage(
                chatId: message.Chat.Id,
                text: "‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 10 —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                cancellationToken: cancellationToken);
        }
        else
        {
            var photo = message.Photo!.Last();
            _marketplaceData.PhotoUrls.Add(photo.FileId);

            await botClient.SendMessage(
                chatId: message.Chat.Id,
                text: $"üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({_marketplaceData.PhotoUrls.Count}/10). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ'.",
                replyMarkup: new ReplyKeyboardMarkup(new[]
                {
                    new[] { new KeyboardButton(ButtonTitles.SkipPhotos) },
                    new[] { new KeyboardButton(ButtonTitles.Cancel) }
                })
                {
                    ResizeKeyboard = true
                },
                cancellationToken: cancellationToken);
        }
    }
    private async Task ShowMarketplaceContactInput(long chatId, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.Cancel)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        await botClient.SendMessage(
            chatId: chatId,
            text: "‚òé <b>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:</b>",
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct
        );
    }

    private async Task<string> ShowMarketplaceResult(long chatId, string username, CancellationToken ct)
    {
        var photosText = _marketplaceData.PhotoUrls.Any() 
            ? "üì∏ –§–æ—Ç–æ –ø—Ä–∏–ª–∞–≥–∞—é—Ç—Å—è" 
            : "üñº –ë–µ–∑ —Ñ–æ—Ç–æ";

        var text = $"""
        üõí <b>{_marketplaceData.Title}</b>
        
        {_marketplaceData.Description}
        
        {photosText}
        ‚òé –¢–µ–ª–µ—Ñ–æ–Ω: +373{_marketplaceData.Contact}
        üíåüëâ @{username}
        """;

        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.PostMarketplace)},
            new[] {new KeyboardButton(ButtonTitles.Cancel)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–≤—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await botClient.SendMessage(
            chatId: chatId,
            text: $"<b>–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n{text}",
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct);

        return text;
    }

    private async Task PostMarketplace(long chatId, long postChatId, int? threadId, string text, CancellationToken ct)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] {new KeyboardButton(ButtonTitles.MainMenu)}
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };

        if (_marketplaceData.PhotoUrls.Any())
        {
            var media = _marketplaceData.PhotoUrls
                .Select((url, index) => new InputMediaPhoto(url)
                {
                    Caption = index == 0 ? text : null,
                    ParseMode = index == 0 ? ParseMode.Html : ParseMode.None
                })
                .ToList();

            await botClient.SendMediaGroup(
                chatId: postChatId,
                messageThreadId: threadId,
                media: media,
                cancellationToken: ct);
        }
        else
        {
            await botClient.SendMessage(
                chatId: postChatId,
                messageThreadId: threadId,
                text: text,
                parseMode: ParseMode.Html,
                cancellationToken: ct);
        }

        await botClient.SendMessage(
            chatId: chatId,
            text: "‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–†—ã–Ω–æ–∫'!",
            replyMarkup: keyboard,
            parseMode: ParseMode.Html,
            cancellationToken: ct);
    }
    #endregion
}